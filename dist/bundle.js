(()=>{"use strict";var e={305:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.businessTheory=void 0,n.businessTheory={label:"Business Theory",url:"ПРИЛОЖЕНИЯ ПРИ ИНВЕСТИРАНЕТО В РЕАЛНИ АКТИВИ",files:[{path:"Капитал (Capital)",code:"\n            представлява съвкупност от блага, имущества и активи,\nизползвани за стопанска дейност с цел получаването на по-голяма съвкупност от блага,\nимущества и активи.\n            "},{path:"Инвестиция (Investment)",code:"\n            e временно отложено потребление на дадена съвкупност\nот блага, имущества, активи поради решение на техния собственик (управляващ) за\nизползването им за извършване на стопанска дейност за определен срок от време с цел\nполучаването на по-голяма съвкупност от блага, имущества и активи.\n            "},{path:"Финансов актив (Financial asset)",code:"\n            е нематериален актив, чиято стойност се базира\nна договор, като например облигации, акции, деривати, банкови депозити (парични\nсредства, ценни метали).\n            "},{path:"Реaлни активи (Материални и нематериални активи/Tangible and intangible assets)",code:"\n            са активи, чиято стойност се получава на базата на физическа нетна стойност на\nдаден актив, а не от договорен иск, за разлика от финансовия актив.\n            "}]}},5:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.repoOptions=void 0;var r=t(305),a=t(426);n.repoOptions=[r.businessTheory,a.reactRepo]},426:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.reactRepo=void 0,n.reactRepo={label:"React",url:"https://github.com/facebook/react",files:[{path:"fixtures/flight/scripts/test.js",code:"\n        if (\n          !process.env.CI &&\n          argv.indexOf('--watchAll') === -1 &&\n          argv.indexOf('--watchAll=false') === -1\n        ) {\n          const hasSourceControl = isInGitRepository() || isInMercurialRepository();\n          argv.push(hasSourceControl ? '--watch' : '--watchAll');\n        }\n        \n        jest.run(argv);\n"},{path:"/packages/react/src/ReactElement.js",code:"\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true,\n};\nlet specialPropKeyWarningShown,\n  specialPropRefWarningShown,\n  didWarnAboutStringRefs;\nif (__DEV__) {\n  didWarnAboutStringRefs = {};\n}\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n"},{path:"fixtures/expiration/src/index.js",code:"\n        class Counter extends React.unstable_AsyncComponent {\n          state = {counter: 0};\n          onCommit() {\n            setImmediate(() => {\n              this.setState(state => ({\n                counter: state.counter + 1,\n              }));\n            });\n          }\n          componentDidMount() {\n            this.onCommit();\n          }\n          componentDidUpdate() {\n            this.onCommit();\n          }\n          render() {\n            return <h1>{this.state.counter}</h1>;\n          }\n        }\n"},{path:"/packages/react-art/src/ReactART.js",code:"\nclass Surface extends React.Component {\n  componentDidMount() {\n    const {height, width} = this.props;\n    this._surface = Mode.Surface(+width, +height, this._tagRef);\n    this._mountNode = createContainer(\n      this._surface,\n      LegacyRoot,\n      null,\n      false,\n      false,\n      '',\n    );\n    updateContainer(this.props.children, this._mountNode, this);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const props = this.props;\n    if (props.height !== prevProps.height || props.width !== prevProps.width) {\n      this._surface.resize(+props.width, +props.height);\n    }\n    updateContainer(this.props.children, this._mountNode, this);\n    if (this._surface.render) {\n      this._surface.render();\n    }\n  }\n  componentWillUnmount() {\n    updateContainer(null, this._mountNode, this);\n  }\n  render() {\n    const props = this.props;\n    const Tag = Mode.Surface.tagName;\n    return (\n      <Tag\n        ref={ref => (this._tagRef = ref)}\n        accessKey={props.accessKey}\n        className={props.className}\n        draggable={props.draggable}\n        role={props.role}\n        style={props.style}\n        tabIndex={props.tabIndex}\n        title={props.title}\n      />\n    );\n  }\n}\n"},{path:"/packages/react/src/ReactChildren.js",code:"\nfunction mapIntoArray(\n  children: ?ReactNodeList,\n  array: Array<React$Node>,\n  escapedPrefix: string,\n  nameSoFar: string,\n  callback: (?React$Node) => ?ReactNodeList,\n): number {\n  const type = typeof children;\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n  let invokeCallback = false;\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n      case 'object':\n        switch ((children: any).$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n    }\n  }\n  if (invokeCallback) {\n    const child = children;\n    let mappedChild = callback(child);\n    const childKey =\n      nameSoFar === '' ? SEPARATOR + getElementKey(child, 0) : nameSoFar;\n    if (isArray(mappedChild)) {\n      let escapedChildKey = '';\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n      mapIntoArray(mappedChild, array, escapedChildKey, '', c => c);\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        if (__DEV__) {\n          if (mappedChild.key && (!child || child.key !== mappedChild.key)) {\n            checkKeyStringCoercion(mappedChild.key);\n          }\n        }\n        mappedChild = cloneAndReplaceKey(\n          mappedChild,\n          escapedPrefix +\n            (mappedChild.key && (!child || child.key !== mappedChild.key)\n              ? escapeUserProvidedKey(\n                  '' + mappedChild.key, // eslint-disable-line react-internal/safe-string-coercion\n                ) + '/'\n              : '') +\n            childKey,\n        );\n      }\n      array.push(mappedChild);\n    }\n    return 1;\n  }\n  let child;\n  let nextName;\n  let subtreeCount = 0;\n  const nextNamePrefix =\n    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n  if (isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(\n        child,\n        array,\n        escapedPrefix,\n        nextName,\n        callback,\n      );\n    }\n  } else {\n    const iteratorFn = getIteratorFn(children);\n    if (typeof iteratorFn === 'function') {\n      const iterableChildren: Iterable<React$Node> & {\n        entries: any,\n      } = (children: any);\n      const iterator = iteratorFn.call(iterableChildren);\n      let step;\n      let ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(\n          child,\n          array,\n          escapedPrefix,\n          nextName,\n          callback,\n        );\n      }\n    } else if (type === 'object') {\n      const childrenString = String((children: any));\n      throw new Error(\n        `Objects are not valid as a React child (found: ${\n          childrenString === '[object Object]'\n            ? 'object with keys {' +\n              Object.keys((children: any)).join(', ') +\n              '}'\n            : childrenString\n        }). ` +\n          'If you meant to render a collection of children, use an array ' +\n          'instead.',\n      );\n    }\n  }\n  return subtreeCount;\n}\n"}]}},384:function(e,n,t){var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(e){i(e)}}function c(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,c)}s((r=r.apply(e,n||[])).next())}))},a=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(o=0)),o;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){o.label=c[1];break}if(6===c[0]&&o.label<a[1]){o.label=a[1],a=c;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(c);break}a[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(e,o)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.clearEditor=n.startEditor=void 0;var i=t(879),o=t(355),c=document.getElementById("editor"),s=document.getElementById("stats"),l=35e3,u="cursor",d="next",h="wrong",p=/\s/,f=function(e){c.innerHTML="";for(var n=0,t=0,r=e;t<r.length;t++){for(var a=0,i=r[t];a<i.length;a++){var o=i[a],s=document.createElement("span");s.innerText=o,n>0&&s.classList.add("next"),p.test(o)&&s.setAttribute("data-whitespace","true"),c.appendChild(s),n++}c.appendChild(document.createElement("br"))}var l=c.firstChild;return l.classList.add(u),l},y=function(e){var n=((l-e.totalTime)/1e3).toFixed(0);s.innerHTML=["",o.separatorLine,"Time left: ".concat(n," seconds"),"Characters typed: ".concat(e.totalCharacters),"Errors: ".concat(e.totalCharacters-e.correctCharacters)].join("<br/>")};n.startEditor=function(e){return e=function(e){return e.trim().replace(/\t/g,"  ")}(e),new Promise((function(n){return r(void 0,void 0,void 0,(function(){var t,r,o,c,s,m,v,b,g,w,C,_,k,x,E,T,L,P,R,S,O,A,K;return a(this,(function(a){return t=e.split(/[ \t]*\r?\n/).filter((function(e){return e.trim().length>0})).map((function(e){return e+" "})),r=0,o=0,c=0,s=0,m=0,v=t.slice(r,3),b=v[c],g=f(v),w=0,C=0,_=0,k=[],x=function(e){g.classList.remove(u),e||g.classList.add(h),(g=g.nextElementSibling).classList.remove(d),g.classList.add(u),k.push(e),o++},E=function(){g.classList.remove(u),g.classList.add(d),(g=g.previousElementSibling).classList.remove(h),g.classList.add(u),o--,k[o]&&m--,k=k.slice(0,-1)},T=function(){var e;b=v[++c],o=0,k=[],g.classList.remove(u),(g=null===(e=g.nextElementSibling)||void 0===e?void 0:e.nextElementSibling).classList.remove(d),g.classList.add(u),P()},L=function(){r+=v.length,v=t.slice(r,r+3),o=0,b=v[c=0],g=f(v),P()},P=function(){for(;o+0<b.length-1&&p.test(b[o+0]);)x(!0)},R=function(){var e=(new Date).valueOf()-w;return{correctCharacters:m,totalCharacters:s,totalTime:e,reachedTheEnd:e<=l}},S=function(){document.removeEventListener("keydown",K),clearTimeout(C),clearInterval(_),n(R())},O=function(){w=(new Date).valueOf(),C=setTimeout(S,l),_=setInterval((function(){return y(R())}),1e3)},A=function(e){if(1===e.length&&o<b.length-1){0===w&&O();var n=e===b[o];x(n),m+=n?1:0,s++,o===b.length-1&&c===v.length-1&&(r<t.length-1?L():S())}else if(o>0&&e===i.backspaceKey)E();else{if(o!==b.length-1||e!==i.enterKey)return;s++,m++,c<v.length-1&&T()}y(R())},K=function(e){var n=e.key;n===i.tabKey?(A(" "),A(" "),e.preventDefault(),e.stopPropagation()):A(n)},document.addEventListener("keydown",K),[2]}))}))}))},n.clearEditor=function(){c.innerHTML="",s.innerHTML=""}},607:function(e,n,t){var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(e){i(e)}}function c(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,c)}s((r=r.apply(e,n||[])).next())}))},a=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(o=0)),o;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){o.label=c[1];break}if(6===c[0]&&o.label<a[1]){o.label=a[1],a=c;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(c);break}a[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(e,o)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var i=t(5),o=t(384),c=t(355),s=function(e,n){return 1===e?"Welcome to Zubrene!":n?"Yay! Let's play again! :)":"Ah whatever, mybe you made up your mind! :)"},l=function(e,n){return r(void 0,void 0,void 0,(function(){var t;return a(this,(function(r){switch(r.label){case 0:return(0,c.clearTerminal)(),t=["".concat(e.label," it is!"),c.separatorLine,"Repo: ".concat(e.url),"File: ".concat(n.path)," ","When you are ready, start typing!",c.separatorLine," "],[4,(0,c.writeLines)(t)];case 1:return r.sent(),[2]}}))}))},u=function(e){return r(void 0,void 0,void 0,(function(){var n,t,r,i;return a(this,(function(a){switch(a.label){case 0:return n=e.totalCharacters-e.correctCharacters,t=e.totalCharacters>0?e.correctCharacters/e.totalCharacters*100:0,r=e.correctCharacters/e.totalTime*1e3*60,i=[e.reachedTheEnd?"Wow you've completed the entire snippet!":"Time's up!","Here are your results:",c.separatorLine," ","Correct characters per minute: ".concat(r.toFixed(2)),"Total errors: ".concat(n>0?n:"No errors, what a performance!"),"Accuracy: ".concat(t.toFixed(2),"%")," ",c.separatorLine,"Wanna play again? (y, n)"," "],[4,(0,c.writeLines)(i)];case 1:return a.sent(),[2]}}))}))};r(void 0,void 0,void 0,(function(){var e,n,t,r,d;return a(this,(function(a){switch(a.label){case 0:e=1,n=!0,a.label=1;case 1:return(0,c.clearTerminal)(),[4,(0,c.writeLines)([s(e,n),"Please select subject to practice:"," "])];case 2:return a.sent(),[4,(0,c.chooseOption)(i.repoOptions)];case 3:return t=a.sent(),r=t.files[Math.floor(Math.random()*t.files.length)],[4,l(t,r)];case 4:return a.sent(),(0,c.removeTerminalCursor)(),[4,(0,o.startEditor)(r.code)];case 5:return d=a.sent(),(0,o.clearEditor)(),(0,c.clearTerminal)(),[4,u(d)];case 6:return a.sent(),[4,(0,c.readLine)()];case 7:return n="y"===a.sent(),e++,[3,1];case 8:return[2]}}))}))},879:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.tabKey=n.backspaceKey=n.enterKey=void 0,n.enterKey="Enter",n.backspaceKey="Backspace",n.tabKey="Tab"},355:function(e,n,t){var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(e){i(e)}}function c(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,c)}s((r=r.apply(e,n||[])).next())}))},a=this&&this.__generator||function(e,n){var t,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(o=0)),o;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return o.label++,{value:c[1],done:!1};case 5:o.label++,r=c[1],c=[0];continue;case 7:c=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){o=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){o.label=c[1];break}if(6===c[0]&&o.label<a[1]){o.label=a[1],a=c;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(c);break}a[2]&&o.ops.pop(),o.trys.pop();continue}c=n.call(e,o)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}},i=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,a=0,i=n.length;a<i;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,"__esModule",{value:!0}),n.clearTerminal=n.chooseOption=n.readLine=n.writeLines=n.removeTerminalCursor=n.addTerminalCursor=n.separatorLine=void 0;var o=t(879),c=document.getElementById("terminal"),s=document.getElementById("cursor");n.separatorLine="------------------------------------------------",n.addTerminalCursor=function(){s.parentElement!==c&&c.appendChild(s)},n.removeTerminalCursor=function(){s.parentElement===c&&c.removeChild(s)},n.writeLines=function(e){return r(void 0,void 0,void 0,(function(){var t,r,i;return a(this,(function(a){switch(a.label){case 0:(0,n.removeTerminalCursor)(),t=0,r=e,a.label=1;case 1:return t<r.length?(i=r[t],[4,l(i)]):[3,4];case 2:a.sent(),d(),a.label=3;case 3:return t++,[3,1];case 4:return c.appendChild(s),[2]}}))}))};var l=function(e){return new Promise((function(n){var t=0,r=setInterval((function(){u(e[t++]),t===e.length&&(clearInterval(r),n())}),20)}))},u=function(e){var n=document.createElement("span");n.textContent=e,c.appendChild(n),c.appendChild(s),c.scrollTop=c.scrollHeight},d=function(){c.appendChild(document.createElement("br"))},h=/^[\w\d ]$/;n.readLine=function(){return new Promise((function(e){var n="",t=function(r){var a=r.key;h.test(a)?(n+=a,u(a)):a===o.enterKey&&n.length>0?(document.removeEventListener("keydown",t),d(),e(n)):a===o.backspaceKey&&n.length>0&&(r.preventDefault(),n=n.slice(0,n.length-1),function(){c.removeChild(s);var e=c.lastChild;e&&c.removeChild(e),c.appendChild(s)}())};l("$ "),document.addEventListener("keydown",t)}))};var p=[["Just enter a","Don't be silly :)"],["A","I mean it this time."],["Ok, you've had your fun... Simply enter a","This is important!"],["What does that even mean? Please, a","I thought we were past this..."],["Ok, wow... Do me a favor here with a","It's getting embarrassing now, really."],["Let me check... Nope, that's not a","Let's not play these games anymore, hm?"]];n.chooseOption=function(e){return r(void 0,void 0,void 0,(function(){var t,r,o,c,s;return a(this,(function(a){switch(a.label){case 0:return[4,(0,n.writeLines)(i(i([],e.map((function(e,n){return"".concat(n+1,". ").concat(e.label)})),!0),[" "],!1))];case 1:a.sent(),t=0,r=-1,a.label=2;case 2:return-1!==r?[3,7]:(c=parseInt,[4,(0,n.readLine)()]);case 3:return(o=c.apply(void 0,[a.sent()]))>0&&o<=e.length?(r=o-1,[3,6]):[3,4];case 4:return s=p[t++],t%=p.length,[4,(0,n.writeLines)([" ","".concat(s[0]," number between 1 and ").concat(e.length,"."),s[1]," "])];case 5:a.sent(),a.label=6;case 6:return[3,2];case 7:return[2,e[r]]}}))}))},n.clearTerminal=function(){c.innerHTML=""}}},n={};!function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={exports:{}};return e[r].call(i.exports,i,i.exports,t),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,